{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\project2\\\\crud-app-2\\\\client\\\\src\\\\pages\\\\Projects.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ProjectTable } from '../components/project_table/projectTable';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Projects = () => {\n  _s();\n  const [projects, setProjects] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchProjects = async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setErrorMessage('No token found. Please log in first.');\n        navigate('/login');\n        return;\n      }\n      try {\n        const response = await fetch('/api/prj/getall', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setProjects(data);\n        } else {\n          const data = await response.json();\n          if (response.status === 401) {\n            setErrorMessage('Token expired. Please log in again.');\n            navigate('/login');\n          } else {\n            setErrorMessage(data.message || 'Failed to fetch projects');\n          }\n        }\n      } catch (error) {\n        setErrorMessage('An error occurred while fetching projects.');\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProjects();\n  }, [navigate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading projects...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projects\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full project-list\",\n      children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 34\n      }, this), projects && /*#__PURE__*/_jsxDEV(ProjectTable, {\n        projects: projects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(Projects, \"z92D/JxdV5lGimvLhffD8ZC3Py8=\", false, function () {\n  return [useNavigate];\n});\n_c = Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["useEffect","useState","ProjectTable","useNavigate","jsxDEV","_jsxDEV","Projects","_s","projects","setProjects","errorMessage","setErrorMessage","loading","setLoading","navigate","fetchProjects","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","status","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/Coding/project2/crud-app-2/client/src/pages/Projects.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { ProjectTable } from '../components/project_table/projectTable';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const Projects = () => {\r\n    const [projects, setProjects] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            const token = localStorage.getItem('token');\r\n    \r\n            if (!token) {\r\n                setErrorMessage('No token found. Please log in first.');\r\n                navigate('/login');\r\n                return;\r\n            }\r\n    \r\n            try {\r\n                const response = await fetch('/api/prj/getall', {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${token}`,\r\n                    },\r\n                });\r\n    \r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setProjects(data);\r\n                } else {\r\n                    const data = await response.json();\r\n                    if (response.status === 401) {\r\n                        setErrorMessage('Token expired. Please log in again.');\r\n                        navigate('/login');\r\n                    } else {\r\n                        setErrorMessage(data.message || 'Failed to fetch projects');\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                setErrorMessage('An error occurred while fetching projects.');\r\n                console.error(error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n    \r\n        fetchProjects();\r\n    }, [navigate]);\r\n\r\n    if (loading) {\r\n        return <div>Loading projects...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"projects\">\r\n            <div className=\"w-full project-list\">\r\n                {errorMessage && <p className=\"text-red-600\">{errorMessage}</p>}\r\n                {projects && <ProjectTable projects={projects} />}\r\n            </div>\r\n        </div>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}